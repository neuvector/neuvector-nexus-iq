// Code generated by go-swagger; DO NOT EDIT.

package response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetResponseRuleParams creates a new GetResponseRuleParams object
// with the default values initialized.
func NewGetResponseRuleParams() *GetResponseRuleParams {
	var ()
	return &GetResponseRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResponseRuleParamsWithTimeout creates a new GetResponseRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResponseRuleParamsWithTimeout(timeout time.Duration) *GetResponseRuleParams {
	var ()
	return &GetResponseRuleParams{

		timeout: timeout,
	}
}

// NewGetResponseRuleParamsWithContext creates a new GetResponseRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResponseRuleParamsWithContext(ctx context.Context) *GetResponseRuleParams {
	var ()
	return &GetResponseRuleParams{

		Context: ctx,
	}
}

// NewGetResponseRuleParamsWithHTTPClient creates a new GetResponseRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResponseRuleParamsWithHTTPClient(client *http.Client) *GetResponseRuleParams {
	var ()
	return &GetResponseRuleParams{
		HTTPClient: client,
	}
}

/*GetResponseRuleParams contains all the parameters to send to the API endpoint
for the get response rule operation typically these are written to a http.Request
*/
type GetResponseRuleParams struct {

	/*XAuthToken*/
	XAuthToken string
	/*Scope
	  When set to fed, returned fed response rules. When set to local, returned local response rules. If there is no query string 'scope', all response rules will be returned.

	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get response rule params
func (o *GetResponseRuleParams) WithTimeout(timeout time.Duration) *GetResponseRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get response rule params
func (o *GetResponseRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get response rule params
func (o *GetResponseRuleParams) WithContext(ctx context.Context) *GetResponseRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get response rule params
func (o *GetResponseRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get response rule params
func (o *GetResponseRuleParams) WithHTTPClient(client *http.Client) *GetResponseRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get response rule params
func (o *GetResponseRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the get response rule params
func (o *GetResponseRuleParams) WithXAuthToken(xAuthToken string) *GetResponseRuleParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the get response rule params
func (o *GetResponseRuleParams) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithScope adds the scope to the get response rule params
func (o *GetResponseRuleParams) WithScope(scope *string) *GetResponseRuleParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get response rule params
func (o *GetResponseRuleParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GetResponseRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Auth-Token
	if err := r.SetHeaderParam("X-Auth-Token", o.XAuthToken); err != nil {
		return err
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
