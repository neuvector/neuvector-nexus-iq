// Code generated by go-swagger; DO NOT EDIT.

package response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/neuvector/neuvector-nexus-iq/neuvector/models"
)

// NewPatchResponseRuleParams creates a new PatchResponseRuleParams object
// with the default values initialized.
func NewPatchResponseRuleParams() *PatchResponseRuleParams {
	var ()
	return &PatchResponseRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchResponseRuleParamsWithTimeout creates a new PatchResponseRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchResponseRuleParamsWithTimeout(timeout time.Duration) *PatchResponseRuleParams {
	var ()
	return &PatchResponseRuleParams{

		timeout: timeout,
	}
}

// NewPatchResponseRuleParamsWithContext creates a new PatchResponseRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchResponseRuleParamsWithContext(ctx context.Context) *PatchResponseRuleParams {
	var ()
	return &PatchResponseRuleParams{

		Context: ctx,
	}
}

// NewPatchResponseRuleParamsWithHTTPClient creates a new PatchResponseRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchResponseRuleParamsWithHTTPClient(client *http.Client) *PatchResponseRuleParams {
	var ()
	return &PatchResponseRuleParams{
		HTTPClient: client,
	}
}

/*PatchResponseRuleParams contains all the parameters to send to the API endpoint
for the patch response rule operation typically these are written to a http.Request
*/
type PatchResponseRuleParams struct {

	/*XAuthToken*/
	XAuthToken string
	/*Body
	  Response rule action data

	*/
	Body *models.RESTResponseRuleActionData

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch response rule params
func (o *PatchResponseRuleParams) WithTimeout(timeout time.Duration) *PatchResponseRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch response rule params
func (o *PatchResponseRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch response rule params
func (o *PatchResponseRuleParams) WithContext(ctx context.Context) *PatchResponseRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch response rule params
func (o *PatchResponseRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch response rule params
func (o *PatchResponseRuleParams) WithHTTPClient(client *http.Client) *PatchResponseRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch response rule params
func (o *PatchResponseRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the patch response rule params
func (o *PatchResponseRuleParams) WithXAuthToken(xAuthToken string) *PatchResponseRuleParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the patch response rule params
func (o *PatchResponseRuleParams) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithBody adds the body to the patch response rule params
func (o *PatchResponseRuleParams) WithBody(body *models.RESTResponseRuleActionData) *PatchResponseRuleParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch response rule params
func (o *PatchResponseRuleParams) SetBody(body *models.RESTResponseRuleActionData) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PatchResponseRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Auth-Token
	if err := r.SetHeaderParam("X-Auth-Token", o.XAuthToken); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
