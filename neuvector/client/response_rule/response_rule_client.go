// Code generated by go-swagger; DO NOT EDIT.

package response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new response rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for response rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteResponseRule(params *DeleteResponseRuleParams) (*DeleteResponseRuleOK, error)

	DeleteResponseRuleID(params *DeleteResponseRuleIDParams) (*DeleteResponseRuleIDOK, error)

	GetResponseRule(params *GetResponseRuleParams) (*GetResponseRuleOK, error)

	GetResponseRuleID(params *GetResponseRuleIDParams) (*GetResponseRuleIDOK, error)

	GetResponseWorkloadRulesID(params *GetResponseWorkloadRulesIDParams) (*GetResponseWorkloadRulesIDOK, error)

	PatchResponseRule(params *PatchResponseRuleParams) (*PatchResponseRuleOK, error)

	PatchResponseRuleID(params *PatchResponseRuleIDParams) (*PatchResponseRuleIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteResponseRule deletes all response rules
*/
func (a *Client) DeleteResponseRule(params *DeleteResponseRuleParams) (*DeleteResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteResponseRule",
		Method:             "DELETE",
		PathPattern:        "/response/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResponseRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteResponseRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteResponseRuleID deletes a response rule
*/
func (a *Client) DeleteResponseRuleID(params *DeleteResponseRuleIDParams) (*DeleteResponseRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResponseRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteResponseRuleID",
		Method:             "DELETE",
		PathPattern:        "/response/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResponseRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResponseRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteResponseRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResponseRule gets a list of response rules
*/
func (a *Client) GetResponseRule(params *GetResponseRuleParams) (*GetResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResponseRule",
		Method:             "GET",
		PathPattern:        "/response/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResponseRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResponseRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResponseRuleID gets a response rule
*/
func (a *Client) GetResponseRuleID(params *GetResponseRuleIDParams) (*GetResponseRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResponseRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResponseRuleID",
		Method:             "GET",
		PathPattern:        "/response/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResponseRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResponseRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResponseRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResponseWorkloadRulesID gets response rule workload
*/
func (a *Client) GetResponseWorkloadRulesID(params *GetResponseWorkloadRulesIDParams) (*GetResponseWorkloadRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResponseWorkloadRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetResponseWorkloadRulesID",
		Method:             "GET",
		PathPattern:        "/response/workload_rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResponseWorkloadRulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResponseWorkloadRulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetResponseWorkloadRulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchResponseRule updates response rule action
*/
func (a *Client) PatchResponseRule(params *PatchResponseRuleParams) (*PatchResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchResponseRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchResponseRule",
		Method:             "PATCH",
		PathPattern:        "/response/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchResponseRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchResponseRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchResponseRuleID updates a response rule
*/
func (a *Client) PatchResponseRuleID(params *PatchResponseRuleIDParams) (*PatchResponseRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchResponseRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchResponseRuleID",
		Method:             "PATCH",
		PathPattern:        "/response/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchResponseRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchResponseRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchResponseRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
