// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetScanRegistryNameParams creates a new GetScanRegistryNameParams object
// with the default values initialized.
func NewGetScanRegistryNameParams() *GetScanRegistryNameParams {
	var ()
	return &GetScanRegistryNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetScanRegistryNameParamsWithTimeout creates a new GetScanRegistryNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetScanRegistryNameParamsWithTimeout(timeout time.Duration) *GetScanRegistryNameParams {
	var ()
	return &GetScanRegistryNameParams{

		timeout: timeout,
	}
}

// NewGetScanRegistryNameParamsWithContext creates a new GetScanRegistryNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetScanRegistryNameParamsWithContext(ctx context.Context) *GetScanRegistryNameParams {
	var ()
	return &GetScanRegistryNameParams{

		Context: ctx,
	}
}

// NewGetScanRegistryNameParamsWithHTTPClient creates a new GetScanRegistryNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetScanRegistryNameParamsWithHTTPClient(client *http.Client) *GetScanRegistryNameParams {
	var ()
	return &GetScanRegistryNameParams{
		HTTPClient: client,
	}
}

/*GetScanRegistryNameParams contains all the parameters to send to the API endpoint
for the get scan registry name operation typically these are written to a http.Request
*/
type GetScanRegistryNameParams struct {

	/*XAuthToken*/
	XAuthToken string
	/*Name
	  Name of the registry

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get scan registry name params
func (o *GetScanRegistryNameParams) WithTimeout(timeout time.Duration) *GetScanRegistryNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scan registry name params
func (o *GetScanRegistryNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scan registry name params
func (o *GetScanRegistryNameParams) WithContext(ctx context.Context) *GetScanRegistryNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scan registry name params
func (o *GetScanRegistryNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scan registry name params
func (o *GetScanRegistryNameParams) WithHTTPClient(client *http.Client) *GetScanRegistryNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scan registry name params
func (o *GetScanRegistryNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the get scan registry name params
func (o *GetScanRegistryNameParams) WithXAuthToken(xAuthToken string) *GetScanRegistryNameParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the get scan registry name params
func (o *GetScanRegistryNameParams) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithName adds the name to the get scan registry name params
func (o *GetScanRegistryNameParams) WithName(name string) *GetScanRegistryNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get scan registry name params
func (o *GetScanRegistryNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *GetScanRegistryNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Auth-Token
	if err := r.SetHeaderParam("X-Auth-Token", o.XAuthToken); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
