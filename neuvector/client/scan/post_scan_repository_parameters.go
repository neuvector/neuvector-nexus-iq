// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/neuvector/neuvector-nexus-iq/neuvector/models"
)

// NewPostScanRepositoryParams creates a new PostScanRepositoryParams object
// with the default values initialized.
func NewPostScanRepositoryParams() *PostScanRepositoryParams {
	var ()
	return &PostScanRepositoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostScanRepositoryParamsWithTimeout creates a new PostScanRepositoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostScanRepositoryParamsWithTimeout(timeout time.Duration) *PostScanRepositoryParams {
	var ()
	return &PostScanRepositoryParams{

		timeout: timeout,
	}
}

// NewPostScanRepositoryParamsWithContext creates a new PostScanRepositoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostScanRepositoryParamsWithContext(ctx context.Context) *PostScanRepositoryParams {
	var ()
	return &PostScanRepositoryParams{

		Context: ctx,
	}
}

// NewPostScanRepositoryParamsWithHTTPClient creates a new PostScanRepositoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostScanRepositoryParamsWithHTTPClient(client *http.Client) *PostScanRepositoryParams {
	var ()
	return &PostScanRepositoryParams{
		HTTPClient: client,
	}
}

/*PostScanRepositoryParams contains all the parameters to send to the API endpoint
for the post scan repository operation typically these are written to a http.Request
*/
type PostScanRepositoryParams struct {

	/*XAuthToken*/
	XAuthToken string
	/*Body
	  Repository data

	*/
	Body *models.RESTScanRepoReqData

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post scan repository params
func (o *PostScanRepositoryParams) WithTimeout(timeout time.Duration) *PostScanRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post scan repository params
func (o *PostScanRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post scan repository params
func (o *PostScanRepositoryParams) WithContext(ctx context.Context) *PostScanRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post scan repository params
func (o *PostScanRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post scan repository params
func (o *PostScanRepositoryParams) WithHTTPClient(client *http.Client) *PostScanRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post scan repository params
func (o *PostScanRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAuthToken adds the xAuthToken to the post scan repository params
func (o *PostScanRepositoryParams) WithXAuthToken(xAuthToken string) *PostScanRepositoryParams {
	o.SetXAuthToken(xAuthToken)
	return o
}

// SetXAuthToken adds the xAuthToken to the post scan repository params
func (o *PostScanRepositoryParams) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithBody adds the body to the post scan repository params
func (o *PostScanRepositoryParams) WithBody(body *models.RESTScanRepoReqData) *PostScanRepositoryParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post scan repository params
func (o *PostScanRepositoryParams) SetBody(body *models.RESTScanRepoReqData) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *PostScanRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Auth-Token
	if err := r.SetHeaderParam("X-Auth-Token", o.XAuthToken); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
