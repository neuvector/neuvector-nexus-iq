// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteScanRegistryName(params *DeleteScanRegistryNameParams) (*DeleteScanRegistryNameOK, error)

	DeleteScanRegistryNameScan(params *DeleteScanRegistryNameScanParams) (*DeleteScanRegistryNameScanOK, error)

	GetScanConfig(params *GetScanConfigParams) (*GetScanConfigOK, error)

	GetScanHostID(params *GetScanHostIDParams) (*GetScanHostIDOK, error)

	GetScanImage(params *GetScanImageParams) (*GetScanImageOK, error)

	GetScanImageID(params *GetScanImageIDParams) (*GetScanImageIDOK, error)

	GetScanPlatform(params *GetScanPlatformParams) (*GetScanPlatformOK, error)

	GetScanPlatformPlatform(params *GetScanPlatformPlatformParams) (*GetScanPlatformPlatformOK, error)

	GetScanRegistry(params *GetScanRegistryParams) (*GetScanRegistryOK, error)

	GetScanRegistryName(params *GetScanRegistryNameParams) (*GetScanRegistryNameOK, error)

	GetScanRegistryNameImageID(params *GetScanRegistryNameImageIDParams) (*GetScanRegistryNameImageIDOK, error)

	GetScanRegistryNameImages(params *GetScanRegistryNameImagesParams) (*GetScanRegistryNameImagesOK, error)

	GetScanRegistryNameLayersID(params *GetScanRegistryNameLayersIDParams) (*GetScanRegistryNameLayersIDOK, error)

	GetScanScanner(params *GetScanScannerParams) (*GetScanScannerOK, error)

	GetScanStatus(params *GetScanStatusParams) (*GetScanStatusOK, error)

	GetScanWorkloadID(params *GetScanWorkloadIDParams) (*GetScanWorkloadIDOK, error)

	PatchScanConfig(params *PatchScanConfigParams) (*PatchScanConfigOK, error)

	PatchScanRegistryName(params *PatchScanRegistryNameParams) (*PatchScanRegistryNameOK, error)

	PostScanPackage(params *PostScanPackageParams) (*PostScanPackageOK, error)

	PostScanPlatformPlatform(params *PostScanPlatformPlatformParams) (*PostScanPlatformPlatformOK, error)

	PostScanRegistry(params *PostScanRegistryParams) (*PostScanRegistryOK, error)

	PostScanRegistryNameScan(params *PostScanRegistryNameScanParams) (*PostScanRegistryNameScanOK, error)

	PostScanRepository(params *PostScanRepositoryParams) (*PostScanRepositoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteScanRegistryName deletes registry
*/
func (a *Client) DeleteScanRegistryName(params *DeleteScanRegistryNameParams) (*DeleteScanRegistryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScanRegistryNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteScanRegistryName",
		Method:             "DELETE",
		PathPattern:        "/scan/registry/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScanRegistryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScanRegistryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteScanRegistryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteScanRegistryNameScan stops registry scan
*/
func (a *Client) DeleteScanRegistryNameScan(params *DeleteScanRegistryNameScanParams) (*DeleteScanRegistryNameScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScanRegistryNameScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteScanRegistryNameScan",
		Method:             "DELETE",
		PathPattern:        "/scan/registry/{name}/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScanRegistryNameScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScanRegistryNameScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteScanRegistryNameScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanConfig gets scan configure
*/
func (a *Client) GetScanConfig(params *GetScanConfigParams) (*GetScanConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanConfig",
		Method:             "GET",
		PathPattern:        "/scan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanHostID gets host scan report
*/
func (a *Client) GetScanHostID(params *GetScanHostIDParams) (*GetScanHostIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanHostIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanHostID",
		Method:             "GET",
		PathPattern:        "/scan/host/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanHostIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanHostIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanHostID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanImage gets scan image summary
*/
func (a *Client) GetScanImage(params *GetScanImageParams) (*GetScanImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanImage",
		Method:             "GET",
		PathPattern:        "/scan/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanImageID gets image scan report
*/
func (a *Client) GetScanImageID(params *GetScanImageIDParams) (*GetScanImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanImageID",
		Method:             "GET",
		PathPattern:        "/scan/image/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanImageIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanImageIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanImageID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanPlatform shows scan platform summary
*/
func (a *Client) GetScanPlatform(params *GetScanPlatformParams) (*GetScanPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanPlatformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanPlatform",
		Method:             "GET",
		PathPattern:        "/scan/platform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanPlatformPlatform shows scan platform report
*/
func (a *Client) GetScanPlatformPlatform(params *GetScanPlatformPlatformParams) (*GetScanPlatformPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanPlatformPlatformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanPlatformPlatform",
		Method:             "GET",
		PathPattern:        "/scan/platform/platform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanPlatformPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanPlatformPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanPlatformPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanRegistry gets a list of registries
*/
func (a *Client) GetScanRegistry(params *GetScanRegistryParams) (*GetScanRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanRegistry",
		Method:             "GET",
		PathPattern:        "/scan/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanRegistryName shows registry
*/
func (a *Client) GetScanRegistryName(params *GetScanRegistryNameParams) (*GetScanRegistryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanRegistryNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanRegistryName",
		Method:             "GET",
		PathPattern:        "/scan/registry/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanRegistryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanRegistryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanRegistryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanRegistryNameImageID gets registry image scan report
*/
func (a *Client) GetScanRegistryNameImageID(params *GetScanRegistryNameImageIDParams) (*GetScanRegistryNameImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanRegistryNameImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanRegistryNameImageID",
		Method:             "GET",
		PathPattern:        "/scan/registry/{name}/image/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanRegistryNameImageIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanRegistryNameImageIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanRegistryNameImageID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanRegistryNameImages shows registry image summary
*/
func (a *Client) GetScanRegistryNameImages(params *GetScanRegistryNameImagesParams) (*GetScanRegistryNameImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanRegistryNameImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanRegistryNameImages",
		Method:             "GET",
		PathPattern:        "/scan/registry/{name}/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanRegistryNameImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanRegistryNameImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanRegistryNameImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanRegistryNameLayersID shows registry layers report
*/
func (a *Client) GetScanRegistryNameLayersID(params *GetScanRegistryNameLayersIDParams) (*GetScanRegistryNameLayersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanRegistryNameLayersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanRegistryNameLayersID",
		Method:             "GET",
		PathPattern:        "/scan/registry/{name}/layers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanRegistryNameLayersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanRegistryNameLayersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanRegistryNameLayersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanScanner gets scanner list
*/
func (a *Client) GetScanScanner(params *GetScanScannerParams) (*GetScanScannerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanScannerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanScanner",
		Method:             "GET",
		PathPattern:        "/scan/scanner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanScannerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanScannerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanScanner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanStatus scans status
*/
func (a *Client) GetScanStatus(params *GetScanStatusParams) (*GetScanStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanStatus",
		Method:             "GET",
		PathPattern:        "/scan/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScanWorkloadID gets scan workload
*/
func (a *Client) GetScanWorkloadID(params *GetScanWorkloadIDParams) (*GetScanWorkloadIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanWorkloadIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScanWorkloadID",
		Method:             "GET",
		PathPattern:        "/scan/workload/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanWorkloadIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanWorkloadIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScanWorkloadID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchScanConfig updates scan configure
*/
func (a *Client) PatchScanConfig(params *PatchScanConfigParams) (*PatchScanConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchScanConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchScanConfig",
		Method:             "PATCH",
		PathPattern:        "/scan/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchScanConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchScanConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchScanConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchScanRegistryName updates registry
*/
func (a *Client) PatchScanRegistryName(params *PatchScanRegistryNameParams) (*PatchScanRegistryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchScanRegistryNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchScanRegistryName",
		Method:             "PATCH",
		PathPattern:        "/scan/registry/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchScanRegistryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchScanRegistryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchScanRegistryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostScanPackage requests package scan
*/
func (a *Client) PostScanPackage(params *PostScanPackageParams) (*PostScanPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScanPackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostScanPackage",
		Method:             "POST",
		PathPattern:        "/scan/package",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScanPackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScanPackageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScanPackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostScanPlatformPlatform requests scan platform
*/
func (a *Client) PostScanPlatformPlatform(params *PostScanPlatformPlatformParams) (*PostScanPlatformPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScanPlatformPlatformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostScanPlatformPlatform",
		Method:             "POST",
		PathPattern:        "/scan/platform/platform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScanPlatformPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScanPlatformPlatformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScanPlatformPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostScanRegistry creates a registry
*/
func (a *Client) PostScanRegistry(params *PostScanRegistryParams) (*PostScanRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScanRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostScanRegistry",
		Method:             "POST",
		PathPattern:        "/scan/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScanRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScanRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScanRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostScanRegistryNameScan starts a registry scan
*/
func (a *Client) PostScanRegistryNameScan(params *PostScanRegistryNameScanParams) (*PostScanRegistryNameScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScanRegistryNameScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostScanRegistryNameScan",
		Method:             "POST",
		PathPattern:        "/scan/registry/{name}/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScanRegistryNameScanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScanRegistryNameScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScanRegistryNameScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostScanRepository scans repository
*/
func (a *Client) PostScanRepository(params *PostScanRepositoryParams) (*PostScanRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScanRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostScanRepository",
		Method:             "POST",
		PathPattern:        "/scan/repository",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScanRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScanRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScanRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
