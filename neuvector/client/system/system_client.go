// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSystemLicense(params *DeleteSystemLicenseParams) (*DeleteSystemLicenseOK, error)

	GetSystemConfig(params *GetSystemConfigParams) (*GetSystemConfigOK, error)

	GetSystemLicense(params *GetSystemLicenseParams) (*GetSystemLicenseOK, error)

	GetSystemSummary(params *GetSystemSummaryParams) (*GetSystemSummaryOK, error)

	PatchSystemConfig(params *PatchSystemConfigParams) (*PatchSystemConfigOK, error)

	PostSystemLicenseRequest(params *PostSystemLicenseRequestParams) (*PostSystemLicenseRequestOK, error)

	PostSystemLicenseUpdate(params *PostSystemLicenseUpdateParams) (*PostSystemLicenseUpdateOK, error)

	PostSystemRequest(params *PostSystemRequestParams) (*PostSystemRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSystemLicense deletes license
*/
func (a *Client) DeleteSystemLicense(params *DeleteSystemLicenseParams) (*DeleteSystemLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSystemLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSystemLicense",
		Method:             "DELETE",
		PathPattern:        "/system/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSystemLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSystemLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSystemLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemConfig systems get configure
*/
func (a *Client) GetSystemConfig(params *GetSystemConfigParams) (*GetSystemConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemConfig",
		Method:             "GET",
		PathPattern:        "/system/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemLicense shows license
*/
func (a *Client) GetSystemLicense(params *GetSystemLicenseParams) (*GetSystemLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemLicense",
		Method:             "GET",
		PathPattern:        "/system/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSystemLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemSummary systems summary
*/
func (a *Client) GetSystemSummary(params *GetSystemSummaryParams) (*GetSystemSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemSummary",
		Method:             "GET",
		PathPattern:        "/system/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSystemSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSystemConfig systems configure
*/
func (a *Client) PatchSystemConfig(params *PatchSystemConfigParams) (*PatchSystemConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSystemConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSystemConfig",
		Method:             "PATCH",
		PathPattern:        "/system/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSystemConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSystemConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchSystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSystemLicenseRequest licenses code request
*/
func (a *Client) PostSystemLicenseRequest(params *PostSystemLicenseRequestParams) (*PostSystemLicenseRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSystemLicenseRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSystemLicenseRequest",
		Method:             "POST",
		PathPattern:        "/system/license/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSystemLicenseRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSystemLicenseRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSystemLicenseRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSystemLicenseUpdate licenses update
*/
func (a *Client) PostSystemLicenseUpdate(params *PostSystemLicenseUpdateParams) (*PostSystemLicenseUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSystemLicenseUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSystemLicenseUpdate",
		Method:             "POST",
		PathPattern:        "/system/license/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSystemLicenseUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSystemLicenseUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSystemLicenseUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSystemRequest systems request
*/
func (a *Client) PostSystemRequest(params *PostSystemRequestParams) (*PostSystemRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSystemRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSystemRequest",
		Method:             "POST",
		PathPattern:        "/system/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSystemRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSystemRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSystemRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
