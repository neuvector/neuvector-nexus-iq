// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTLicenseRequest REST license request
//
// swagger:model RESTLicenseRequest
type RESTLicenseRequest struct {

	// cpu limit
	CPULimit int64 `json:"cpu_limit,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// enforce
	// Required: true
	Enforce *bool `json:"enforce"`

	// months
	// Required: true
	Months *int64 `json:"months"`

	// multi cluster limit
	// Required: true
	MultiClusterLimit *int64 `json:"multi_cluster_limit"`

	// name
	// Required: true
	Name *string `json:"name"`

	// node limit
	// Required: true
	NodeLimit *int64 `json:"node_limit"`

	// phone
	// Required: true
	Phone *string `json:"phone"`

	// scan
	// Required: true
	Scan *bool `json:"scan"`
}

// Validate validates this REST license request
func (m *RESTLicenseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiClusterLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTLicenseRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validateEnforce(formats strfmt.Registry) error {

	if err := validate.Required("enforce", "body", m.Enforce); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validateMonths(formats strfmt.Registry) error {

	if err := validate.Required("months", "body", m.Months); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validateMultiClusterLimit(formats strfmt.Registry) error {

	if err := validate.Required("multi_cluster_limit", "body", m.MultiClusterLimit); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validateNodeLimit(formats strfmt.Registry) error {

	if err := validate.Required("node_limit", "body", m.NodeLimit); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("phone", "body", m.Phone); err != nil {
		return err
	}

	return nil
}

func (m *RESTLicenseRequest) validateScan(formats strfmt.Registry) error {

	if err := validate.Required("scan", "body", m.Scan); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTLicenseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTLicenseRequest) UnmarshalBinary(b []byte) error {
	var res RESTLicenseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
