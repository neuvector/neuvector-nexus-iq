// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTRegistryConfig REST registry config
//
// swagger:model RESTRegistryConfig
type RESTRegistryConfig struct {

	// auth token
	AuthToken string `json:"auth_token,omitempty"`

	// auth with token
	AuthWithToken bool `json:"auth_with_token,omitempty"`

	// aws key
	AwsKey *RESTAWSAccountKeyConfig `json:"aws_key,omitempty"`

	// filters
	Filters []string `json:"filters"`

	// gcr key
	GcrKey *RESTGCRKeyConfig `json:"gcr_key,omitempty"`

	// gitlab external url
	GitlabExternalURL string `json:"gitlab_external_url,omitempty"`

	// gitlab private token
	GitlabPrivateToken string `json:"gitlab_private_token,omitempty"`

	// ibm cloud account
	IbmCloudAccount string `json:"ibm_cloud_account,omitempty"`

	// ibm cloud token url
	IbmCloudTokenURL string `json:"ibm_cloud_token_url,omitempty"`

	// jfrog mode
	JfrogMode string `json:"jfrog_mode,omitempty"`

	// jfrog xray
	JfrogXray *RESTJfrogXrayConfig `json:"jfrog_xray,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	Password string `json:"password,omitempty"`

	// registry
	Registry string `json:"registry,omitempty"`

	// registry type
	// Required: true
	RegistryType *string `json:"registry_type"`

	// repo limit
	RepoLimit int64 `json:"repo_limit,omitempty"`

	// rescan after db update
	RescanAfterDbUpdate bool `json:"rescan_after_db_update,omitempty"`

	// scan layers
	ScanLayers bool `json:"scan_layers,omitempty"`

	// schedule
	Schedule *RESTScanSchedule `json:"schedule,omitempty"`

	// tag limit
	TagLimit int64 `json:"tag_limit,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this REST registry config
func (m *RESTRegistryConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcrKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJfrogXray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTRegistryConfig) validateAwsKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsKey) { // not required
		return nil
	}

	if m.AwsKey != nil {
		if err := m.AwsKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_key")
			}
			return err
		}
	}

	return nil
}

func (m *RESTRegistryConfig) validateGcrKey(formats strfmt.Registry) error {

	if swag.IsZero(m.GcrKey) { // not required
		return nil
	}

	if m.GcrKey != nil {
		if err := m.GcrKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcr_key")
			}
			return err
		}
	}

	return nil
}

func (m *RESTRegistryConfig) validateJfrogXray(formats strfmt.Registry) error {

	if swag.IsZero(m.JfrogXray) { // not required
		return nil
	}

	if m.JfrogXray != nil {
		if err := m.JfrogXray.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jfrog_xray")
			}
			return err
		}
	}

	return nil
}

func (m *RESTRegistryConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryConfig) validateRegistryType(formats strfmt.Registry) error {

	if err := validate.Required("registry_type", "body", m.RegistryType); err != nil {
		return err
	}

	return nil
}

func (m *RESTRegistryConfig) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTRegistryConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTRegistryConfig) UnmarshalBinary(b []byte) error {
	var res RESTRegistryConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
