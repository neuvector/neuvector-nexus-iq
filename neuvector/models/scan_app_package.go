// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanAppPackage REST scan app package
//
// swagger:model RESTScanAppPackage
type RESTScanAppPackage struct {

	// app name
	// Required: true
	AppName *string `json:"app_name"`

	// file name
	// Required: true
	FileName *string `json:"file_name"`

	// module name
	// Required: true
	ModuleName *string `json:"module_name"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this REST scan app package
func (m *RESTScanAppPackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanAppPackage) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("app_name", "body", m.AppName); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanAppPackage) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("file_name", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanAppPackage) validateModuleName(formats strfmt.Registry) error {

	if err := validate.Required("module_name", "body", m.ModuleName); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanAppPackage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanAppPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanAppPackage) UnmarshalBinary(b []byte) error {
	var res RESTScanAppPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
