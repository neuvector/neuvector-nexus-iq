// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanPackageReqData REST scan package req data
//
// swagger:model RESTScanPackageReqData
type RESTScanPackageReqData struct {

	// application packages
	// Required: true
	ApplicationPackages []*RESTScanAppPackage `json:"application_packages"`

	// function
	// Required: true
	Function *string `json:"function"`

	// job
	// Required: true
	Job *string `json:"job"`

	// region
	// Required: true
	Region *string `json:"region"`

	// source
	// Required: true
	Source *string `json:"source"`

	// user
	// Required: true
	User *string `json:"user"`

	// workspace
	// Required: true
	Workspace *string `json:"workspace"`
}

// Validate validates this REST scan package req data
func (m *RESTScanPackageReqData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanPackageReqData) validateApplicationPackages(formats strfmt.Registry) error {

	if err := validate.Required("application_packages", "body", m.ApplicationPackages); err != nil {
		return err
	}

	for i := 0; i < len(m.ApplicationPackages); i++ {
		if swag.IsZero(m.ApplicationPackages[i]) { // not required
			continue
		}

		if m.ApplicationPackages[i] != nil {
			if err := m.ApplicationPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("application_packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RESTScanPackageReqData) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPackageReqData) validateJob(formats strfmt.Registry) error {

	if err := validate.Required("job", "body", m.Job); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPackageReqData) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPackageReqData) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPackageReqData) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanPackageReqData) validateWorkspace(formats strfmt.Registry) error {

	if err := validate.Required("workspace", "body", m.Workspace); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanPackageReqData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanPackageReqData) UnmarshalBinary(b []byte) error {
	var res RESTScanPackageReqData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
