// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTScanRepoReq REST scan repo req
//
// swagger:model RESTScanRepoReq
type RESTScanRepoReq struct {

	// metadata
	// Required: true
	Metadata *RESTScanMeta `json:"metadata"`

	// password
	Password string `json:"password,omitempty"`

	// registry
	// Required: true
	Registry *string `json:"registry"`

	// repository
	// Required: true
	Repository *string `json:"repository"`

	// scan layers
	// Required: true
	ScanLayers *bool `json:"scan_layers"`

	// tag
	// Required: true
	Tag *string `json:"tag"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this REST scan repo req
func (m *RESTScanRepoReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTScanRepoReq) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *RESTScanRepoReq) validateRegistry(formats strfmt.Registry) error {

	if err := validate.Required("registry", "body", m.Registry); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReq) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReq) validateScanLayers(formats strfmt.Registry) error {

	if err := validate.Required("scan_layers", "body", m.ScanLayers); err != nil {
		return err
	}

	return nil
}

func (m *RESTScanRepoReq) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTScanRepoReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTScanRepoReq) UnmarshalBinary(b []byte) error {
	var res RESTScanRepoReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
