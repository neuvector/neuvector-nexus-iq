// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSystemConfig REST system config
//
// swagger:model RESTSystemConfig
type RESTSystemConfig struct {

	// auth by platform
	// Required: true
	AuthByPlatform *bool `json:"auth_by_platform"`

	// auth order
	// Required: true
	AuthOrder []string `json:"auth_order"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// configured internal subnets
	ConfiguredInternalSubnets []string `json:"configured_internal_subnets"`

	// controller debug
	// Required: true
	ControllerDebug []string `json:"controller_debug"`

	// ibmsa ep connected at
	// Required: true
	IbmsaEpConnectedAt *string `json:"ibmsa_ep_connected_at"`

	// ibmsa ep dashboard url
	// Required: true
	IbmsaEpDashboardURL *string `json:"ibmsa_ep_dashboard_url"`

	// ibmsa ep enabled
	// Required: true
	IbmsaEpEnabled *bool `json:"ibmsa_ep_enabled"`

	// ibmsa ep start
	// Required: true
	IbmsaEpStart *uint32 `json:"ibmsa_ep_start"`

	// monitor service mesh
	// Required: true
	MonitorServiceMesh *bool `json:"monitor_service_mesh"`

	// new service policy mode
	// Required: true
	NewServicePolicyMode *string `json:"new_service_policy_mode"`

	// registry http proxy
	// Required: true
	RegistryHTTPProxy *RESTProxy `json:"registry_http_proxy"`

	// registry http proxy status
	// Required: true
	RegistryHTTPProxyStatus *bool `json:"registry_http_proxy_status"`

	// registry https proxy
	// Required: true
	RegistryHTTPSProxy *RESTProxy `json:"registry_https_proxy"`

	// registry https proxy status
	// Required: true
	RegistryHTTPSProxyStatus *bool `json:"registry_https_proxy_status"`

	// syslog categories
	// Required: true
	SyslogCategories []string `json:"syslog_categories"`

	// syslog in json
	// Required: true
	SyslogInJSON *bool `json:"syslog_in_json"`

	// syslog ip
	// Required: true
	SyslogIP *string `json:"syslog_ip"`

	// syslog ip proto
	// Required: true
	SyslogIPProto *uint8 `json:"syslog_ip_proto"`

	// syslog level
	// Required: true
	SyslogLevel *string `json:"syslog_level"`

	// syslog port
	// Required: true
	SyslogPort *uint16 `json:"syslog_port"`

	// syslog status
	// Required: true
	SyslogStatus *bool `json:"syslog_status"`

	// webhook status
	// Required: true
	WebhookStatus *bool `json:"webhook_status"`

	// webhook url
	WebhookURL string `json:"webhook_url,omitempty"`
}

// Validate validates this REST system config
func (m *RESTSystemConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthByPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerDebug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmsaEpConnectedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmsaEpDashboardURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmsaEpEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmsaEpStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorServiceMesh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewServicePolicyMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPProxyStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPSProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPSProxyStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogInJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogIPProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyslogStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfig) validateAuthByPlatform(formats strfmt.Registry) error {

	if err := validate.Required("auth_by_platform", "body", m.AuthByPlatform); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateAuthOrder(formats strfmt.Registry) error {

	if err := validate.Required("auth_order", "body", m.AuthOrder); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateControllerDebug(formats strfmt.Registry) error {

	if err := validate.Required("controller_debug", "body", m.ControllerDebug); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateIbmsaEpConnectedAt(formats strfmt.Registry) error {

	if err := validate.Required("ibmsa_ep_connected_at", "body", m.IbmsaEpConnectedAt); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateIbmsaEpDashboardURL(formats strfmt.Registry) error {

	if err := validate.Required("ibmsa_ep_dashboard_url", "body", m.IbmsaEpDashboardURL); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateIbmsaEpEnabled(formats strfmt.Registry) error {

	if err := validate.Required("ibmsa_ep_enabled", "body", m.IbmsaEpEnabled); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateIbmsaEpStart(formats strfmt.Registry) error {

	if err := validate.Required("ibmsa_ep_start", "body", m.IbmsaEpStart); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateMonitorServiceMesh(formats strfmt.Registry) error {

	if err := validate.Required("monitor_service_mesh", "body", m.MonitorServiceMesh); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateNewServicePolicyMode(formats strfmt.Registry) error {

	if err := validate.Required("new_service_policy_mode", "body", m.NewServicePolicyMode); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateRegistryHTTPProxy(formats strfmt.Registry) error {

	if err := validate.Required("registry_http_proxy", "body", m.RegistryHTTPProxy); err != nil {
		return err
	}

	if m.RegistryHTTPProxy != nil {
		if err := m.RegistryHTTPProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_http_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfig) validateRegistryHTTPProxyStatus(formats strfmt.Registry) error {

	if err := validate.Required("registry_http_proxy_status", "body", m.RegistryHTTPProxyStatus); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateRegistryHTTPSProxy(formats strfmt.Registry) error {

	if err := validate.Required("registry_https_proxy", "body", m.RegistryHTTPSProxy); err != nil {
		return err
	}

	if m.RegistryHTTPSProxy != nil {
		if err := m.RegistryHTTPSProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_https_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfig) validateRegistryHTTPSProxyStatus(formats strfmt.Registry) error {

	if err := validate.Required("registry_https_proxy_status", "body", m.RegistryHTTPSProxyStatus); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogCategories(formats strfmt.Registry) error {

	if err := validate.Required("syslog_categories", "body", m.SyslogCategories); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogInJSON(formats strfmt.Registry) error {

	if err := validate.Required("syslog_in_json", "body", m.SyslogInJSON); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogIP(formats strfmt.Registry) error {

	if err := validate.Required("syslog_ip", "body", m.SyslogIP); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogIPProto(formats strfmt.Registry) error {

	if err := validate.Required("syslog_ip_proto", "body", m.SyslogIPProto); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogLevel(formats strfmt.Registry) error {

	if err := validate.Required("syslog_level", "body", m.SyslogLevel); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogPort(formats strfmt.Registry) error {

	if err := validate.Required("syslog_port", "body", m.SyslogPort); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateSyslogStatus(formats strfmt.Registry) error {

	if err := validate.Required("syslog_status", "body", m.SyslogStatus); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfig) validateWebhookStatus(formats strfmt.Registry) error {

	if err := validate.Required("webhook_status", "body", m.WebhookStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfig) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
