// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSystemConfigConfig REST system config config
//
// swagger:model RESTSystemConfigConfig
type RESTSystemConfigConfig struct {

	// auth by platform
	AuthByPlatform bool `json:"auth_by_platform,omitempty"`

	// auth order
	AuthOrder []string `json:"auth_order"`

	// cluster name
	// Required: true
	ClusterName *string `json:"cluster_name"`

	// controller debug
	ControllerDebug []string `json:"controller_debug"`

	// ibmsa ep dashboard url
	IbmsaEpDashboardURL string `json:"ibmsa_ep_dashboard_url,omitempty"`

	// ibmsa ep enabled
	IbmsaEpEnabled bool `json:"ibmsa_ep_enabled,omitempty"`

	// monitor service mesh
	MonitorServiceMesh bool `json:"monitor_service_mesh,omitempty"`

	// new service policy mode
	NewServicePolicyMode string `json:"new_service_policy_mode,omitempty"`

	// registry http proxy
	RegistryHTTPProxy *RESTProxy `json:"registry_http_proxy,omitempty"`

	// registry http proxy status
	RegistryHTTPProxyStatus bool `json:"registry_http_proxy_status,omitempty"`

	// registry https proxy
	RegistryHTTPSProxy *RESTProxy `json:"registry_https_proxy,omitempty"`

	// registry https proxy status
	RegistryHTTPSProxyStatus bool `json:"registry_https_proxy_status,omitempty"`

	// syslog categories
	SyslogCategories []string `json:"syslog_categories"`

	// syslog in json
	SyslogInJSON bool `json:"syslog_in_json,omitempty"`

	// syslog ip
	SyslogIP string `json:"syslog_ip,omitempty"`

	// syslog ip proto
	SyslogIPProto uint8 `json:"syslog_ip_proto,omitempty"`

	// syslog level
	SyslogLevel string `json:"syslog_level,omitempty"`

	// syslog port
	SyslogPort uint16 `json:"syslog_port,omitempty"`

	// syslog status
	SyslogStatus bool `json:"syslog_status,omitempty"`

	// webhook status
	WebhookStatus bool `json:"webhook_status,omitempty"`

	// webhook url
	WebhookURL string `json:"webhook_url,omitempty"`
}

// Validate validates this REST system config config
func (m *RESTSystemConfigConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryHTTPSProxy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemConfigConfig) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemConfigConfig) validateRegistryHTTPProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistryHTTPProxy) { // not required
		return nil
	}

	if m.RegistryHTTPProxy != nil {
		if err := m.RegistryHTTPProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_http_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *RESTSystemConfigConfig) validateRegistryHTTPSProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistryHTTPSProxy) { // not required
		return nil
	}

	if m.RegistryHTTPSProxy != nil {
		if err := m.RegistryHTTPSProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry_https_proxy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemConfigConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemConfigConfig) UnmarshalBinary(b []byte) error {
	var res RESTSystemConfigConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
