// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTSystemSummary REST system summary
//
// swagger:model RESTSystemSummary
type RESTSystemSummary struct {

	// controllers
	// Required: true
	Controllers *int64 `json:"controllers"`

	// cvedb create time
	// Required: true
	CvedbCreateTime *string `json:"cvedb_create_time"`

	// cvedb version
	// Required: true
	CvedbVersion *string `json:"cvedb_version"`

	// disconnected enforcers
	// Required: true
	DisconnectedEnforcers *int64 `json:"disconnected_enforcers"`

	// enforcers
	// Required: true
	Enforcers *int64 `json:"enforcers"`

	// hosts
	// Required: true
	Hosts *int64 `json:"hosts"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// policy rules
	// Required: true
	PolicyRules *int64 `json:"policy_rules"`

	// running pods
	// Required: true
	RunningPods *int64 `json:"running_pods"`

	// running workloads
	// Required: true
	RunningWorkloads *int64 `json:"running_workloads"`

	// scanners
	// Required: true
	Scanners *int64 `json:"scanners"`

	// services
	// Required: true
	Services *int64 `json:"services"`

	// workloads
	// Required: true
	Workloads *int64 `json:"workloads"`
}

// Validate validates this REST system summary
func (m *RESTSystemSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCvedbVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedEnforcers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforcers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningPods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTSystemSummary) validateControllers(formats strfmt.Registry) error {

	if err := validate.Required("controllers", "body", m.Controllers); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateCvedbCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_create_time", "body", m.CvedbCreateTime); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateCvedbVersion(formats strfmt.Registry) error {

	if err := validate.Required("cvedb_version", "body", m.CvedbVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateDisconnectedEnforcers(formats strfmt.Registry) error {

	if err := validate.Required("disconnected_enforcers", "body", m.DisconnectedEnforcers); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateEnforcers(formats strfmt.Registry) error {

	if err := validate.Required("enforcers", "body", m.Enforcers); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validatePolicyRules(formats strfmt.Registry) error {

	if err := validate.Required("policy_rules", "body", m.PolicyRules); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateRunningPods(formats strfmt.Registry) error {

	if err := validate.Required("running_pods", "body", m.RunningPods); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateRunningWorkloads(formats strfmt.Registry) error {

	if err := validate.Required("running_workloads", "body", m.RunningWorkloads); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateScanners(formats strfmt.Registry) error {

	if err := validate.Required("scanners", "body", m.Scanners); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateServices(formats strfmt.Registry) error {

	if err := validate.Required("services", "body", m.Services); err != nil {
		return err
	}

	return nil
}

func (m *RESTSystemSummary) validateWorkloads(formats strfmt.Registry) error {

	if err := validate.Required("workloads", "body", m.Workloads); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTSystemSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTSystemSummary) UnmarshalBinary(b []byte) error {
	var res RESTSystemSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
