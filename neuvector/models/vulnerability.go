// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RESTVulnerability REST vulnerability
//
// swagger:model RESTVulnerability
type RESTVulnerability struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// fixed version
	// Required: true
	FixedVersion *string `json:"fixed_version"`

	// last modified timestamp
	// Required: true
	LastModifiedTimestamp *int64 `json:"last_modified_timestamp"`

	// link
	// Required: true
	Link *string `json:"link"`

	// name
	// Required: true
	Name *string `json:"name"`

	// package name
	// Required: true
	PackageName *string `json:"package_name"`

	// package version
	// Required: true
	PackageVersion *string `json:"package_version"`

	// published timestamp
	// Required: true
	PublishedTimestamp *int64 `json:"published_timestamp"`

	// score
	// Required: true
	Score *float64 `json:"score"`

	// score v3
	// Required: true
	ScoreV3 *float64 `json:"score_v3"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// vectors
	// Required: true
	Vectors *string `json:"vectors"`

	// vectors v3
	// Required: true
	VectorsV3 *string `json:"vectors_v3"`
}

// Validate validates this REST vulnerability
func (m *RESTVulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScoreV3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectorsV3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RESTVulnerability) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateFixedVersion(formats strfmt.Registry) error {

	if err := validate.Required("fixed_version", "body", m.FixedVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("last_modified_timestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("package_name", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validatePackageVersion(formats strfmt.Registry) error {

	if err := validate.Required("package_version", "body", m.PackageVersion); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validatePublishedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("published_timestamp", "body", m.PublishedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateScoreV3(formats strfmt.Registry) error {

	if err := validate.Required("score_v3", "body", m.ScoreV3); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateVectors(formats strfmt.Registry) error {

	if err := validate.Required("vectors", "body", m.Vectors); err != nil {
		return err
	}

	return nil
}

func (m *RESTVulnerability) validateVectorsV3(formats strfmt.Registry) error {

	if err := validate.Required("vectors_v3", "body", m.VectorsV3); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RESTVulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RESTVulnerability) UnmarshalBinary(b []byte) error {
	var res RESTVulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
