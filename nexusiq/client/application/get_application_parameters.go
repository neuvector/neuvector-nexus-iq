// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetApplicationParams creates a new GetApplicationParams object
// with the default values initialized.
func NewGetApplicationParams() *GetApplicationParams {
	var ()
	return &GetApplicationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetApplicationParamsWithTimeout creates a new GetApplicationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetApplicationParamsWithTimeout(timeout time.Duration) *GetApplicationParams {
	var ()
	return &GetApplicationParams{

		timeout: timeout,
	}
}

// NewGetApplicationParamsWithContext creates a new GetApplicationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetApplicationParamsWithContext(ctx context.Context) *GetApplicationParams {
	var ()
	return &GetApplicationParams{

		Context: ctx,
	}
}

// NewGetApplicationParamsWithHTTPClient creates a new GetApplicationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetApplicationParamsWithHTTPClient(client *http.Client) *GetApplicationParams {
	var ()
	return &GetApplicationParams{
		HTTPClient: client,
	}
}

/*GetApplicationParams contains all the parameters to send to the API endpoint
for the get application operation typically these are written to a http.Request
*/
type GetApplicationParams struct {

	/*PublicID
	  Public ID of the application

	*/
	PublicID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get application params
func (o *GetApplicationParams) WithTimeout(timeout time.Duration) *GetApplicationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get application params
func (o *GetApplicationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get application params
func (o *GetApplicationParams) WithContext(ctx context.Context) *GetApplicationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get application params
func (o *GetApplicationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get application params
func (o *GetApplicationParams) WithHTTPClient(client *http.Client) *GetApplicationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get application params
func (o *GetApplicationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPublicID adds the publicID to the get application params
func (o *GetApplicationParams) WithPublicID(publicID *string) *GetApplicationParams {
	o.SetPublicID(publicID)
	return o
}

// SetPublicID adds the publicId to the get application params
func (o *GetApplicationParams) SetPublicID(publicID *string) {
	o.PublicID = publicID
}

// WriteToRequest writes these params to a swagger request
func (o *GetApplicationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PublicID != nil {

		// query param publicId
		var qrPublicID string
		if o.PublicID != nil {
			qrPublicID = *o.PublicID
		}
		qPublicID := qrPublicID
		if qPublicID != "" {
			if err := r.SetQueryParam("publicId", qPublicID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
