// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/neuvector/neuvector-nexus-iq/nexusiq/models"
)

// GetLicenseReader is a Reader for the GetLicense structure.
type GetLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 402:
		result := NewGetLicensePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLicenseOK creates a GetLicenseOK with default headers values
func NewGetLicenseOK() *GetLicenseOK {
	return &GetLicenseOK{}
}

/*GetLicenseOK handles this case with default header values.

OK
*/
type GetLicenseOK struct {
	Payload *models.License
}

func (o *GetLicenseOK) Error() string {
	return fmt.Sprintf("[GET /rest/product/license][%d] getLicenseOK  %+v", 200, o.Payload)
}

func (o *GetLicenseOK) GetPayload() *models.License {
	return o.Payload
}

func (o *GetLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicensePaymentRequired creates a GetLicensePaymentRequired with default headers values
func NewGetLicensePaymentRequired() *GetLicensePaymentRequired {
	return &GetLicensePaymentRequired{}
}

/*GetLicensePaymentRequired handles this case with default header values.

PaymentRequired
*/
type GetLicensePaymentRequired struct {
}

func (o *GetLicensePaymentRequired) Error() string {
	return fmt.Sprintf("[GET /rest/product/license][%d] getLicensePaymentRequired ", 402)
}

func (o *GetLicensePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
