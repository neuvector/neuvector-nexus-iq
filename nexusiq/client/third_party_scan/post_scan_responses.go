// Code generated by go-swagger; DO NOT EDIT.

package third_party_scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/neuvector/neuvector-nexus-iq/nexusiq/models"
)

// PostScanReader is a Reader for the PostScan structure.
type PostScanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostScanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostScanAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostScanUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostScanAccepted creates a PostScanAccepted with default headers values
func NewPostScanAccepted() *PostScanAccepted {
	return &PostScanAccepted{}
}

/*PostScanAccepted handles this case with default header values.

Accepted
*/
type PostScanAccepted struct {
	Payload *models.ScanStatusReference
}

func (o *PostScanAccepted) Error() string {
	return fmt.Sprintf("[POST /scan/applications/{applicationInternalId}/sources/{source}][%d] postScanAccepted  %+v", 202, o.Payload)
}

func (o *PostScanAccepted) GetPayload() *models.ScanStatusReference {
	return o.Payload
}

func (o *PostScanAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScanStatusReference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostScanUnauthorized creates a PostScanUnauthorized with default headers values
func NewPostScanUnauthorized() *PostScanUnauthorized {
	return &PostScanUnauthorized{}
}

/*PostScanUnauthorized handles this case with default header values.

Unauthorized
*/
type PostScanUnauthorized struct {
}

func (o *PostScanUnauthorized) Error() string {
	return fmt.Sprintf("[POST /scan/applications/{applicationInternalId}/sources/{source}][%d] postScanUnauthorized ", 401)
}

func (o *PostScanUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
