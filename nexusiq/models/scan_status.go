// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScanStatus scan status
//
// swagger:model ScanStatus
type ScanStatus struct {

	// components affected
	// Required: true
	ComponentsAffected *Violations `json:"componentsAffected"`

	// grandfathered policy violations
	GrandfatheredPolicyViolations int64 `json:"grandfatheredPolicyViolations,omitempty"`

	// is error
	// Required: true
	IsError *bool `json:"isError"`

	// open policy violations
	// Required: true
	OpenPolicyViolations *Violations `json:"openPolicyViolations"`

	// policy action
	// Required: true
	PolicyAction *string `json:"policyAction"`

	// report Html Url
	// Required: true
	ReportHTMLURL *string `json:"reportHtmlUrl"`
}

// Validate validates this scan status
func (m *ScanStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentsAffected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenPolicyViolations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScanStatus) validateComponentsAffected(formats strfmt.Registry) error {

	if err := validate.Required("componentsAffected", "body", m.ComponentsAffected); err != nil {
		return err
	}

	if m.ComponentsAffected != nil {
		if err := m.ComponentsAffected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentsAffected")
			}
			return err
		}
	}

	return nil
}

func (m *ScanStatus) validateIsError(formats strfmt.Registry) error {

	if err := validate.Required("isError", "body", m.IsError); err != nil {
		return err
	}

	return nil
}

func (m *ScanStatus) validateOpenPolicyViolations(formats strfmt.Registry) error {

	if err := validate.Required("openPolicyViolations", "body", m.OpenPolicyViolations); err != nil {
		return err
	}

	if m.OpenPolicyViolations != nil {
		if err := m.OpenPolicyViolations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openPolicyViolations")
			}
			return err
		}
	}

	return nil
}

func (m *ScanStatus) validatePolicyAction(formats strfmt.Registry) error {

	if err := validate.Required("policyAction", "body", m.PolicyAction); err != nil {
		return err
	}

	return nil
}

func (m *ScanStatus) validateReportHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("reportHtmlUrl", "body", m.ReportHTMLURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScanStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScanStatus) UnmarshalBinary(b []byte) error {
	var res ScanStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
