// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Violations violations
//
// swagger:model Violations
type Violations struct {

	// critical
	// Required: true
	Critical *int64 `json:"critical"`

	// moderate
	// Required: true
	Moderate *int64 `json:"moderate"`

	// severe
	// Required: true
	Severe *int64 `json:"severe"`
}

// Validate validates this violations
func (m *Violations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCritical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModerate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSevere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Violations) validateCritical(formats strfmt.Registry) error {

	if err := validate.Required("critical", "body", m.Critical); err != nil {
		return err
	}

	return nil
}

func (m *Violations) validateModerate(formats strfmt.Registry) error {

	if err := validate.Required("moderate", "body", m.Moderate); err != nil {
		return err
	}

	return nil
}

func (m *Violations) validateSevere(formats strfmt.Registry) error {

	if err := validate.Required("severe", "body", m.Severe); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Violations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Violations) UnmarshalBinary(b []byte) error {
	var res Violations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
