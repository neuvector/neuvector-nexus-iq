// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package cyclonedx

import (
	"encoding/xml"
	"time"
)

// ComponentsType ...
type ComponentsType struct {
	XMLName   xml.Name   `xml:"componentsType"`
	Component *Component `xml:"component"`
}

// Hashes ...
type Hashes struct {
	XMLName xml.Name  `xml:"hashes"`
	Hash    *HashType `xml:"hash"`
}

// Licenses ...
type Licenses struct {
	XMLName    xml.Name       `xml:"licenses"`
	License    []*LicenseType `xml:"license"`
	Expression []string       `xml:"expression"`
}

// Components ...
type Components struct {
	XMLName   xml.Name   `xml:"components"`
	Component *Component `xml:"component"`
}

// Component ...
type Component struct {
	XMLName            xml.Name              `xml:"component"`
	TypeAttr           string                `xml:"type,attr"`
	BomrefAttr         string                `xml:"bom-ref,attr,omitempty"`
	Publisher          []string              `xml:"publisher"`
	Group              []string              `xml:"group"`
	Name               []string              `xml:"name"`
	Version            []string              `xml:"version"`
	Description        []string              `xml:"description"`
	Scope              []string              `xml:"scope"`
	Hashes             []*Hashes             `xml:"hashes"`
	Licenses           []*Licenses           `xml:"licenses"`
	Copyright          []string              `xml:"copyright"`
	Cpe                []string              `xml:"cpe"`
	Purl               []string              `xml:"purl"`
	Modified           []bool                `xml:"modified"`
	Pedigree           []*PedigreeType       `xml:"pedigree"`
	ExternalReferences []*ExternalReferences `xml:"externalReferences"`
	Components         []*Components         `xml:"components"`
}

// LicenseType ...
type LicenseType struct {
	XMLName xml.Name           `xml:"licenseType"`
	Id      []string           `xml:"id"`
	Name    []string           `xml:"name"`
	Text    []*LicenseTextType `xml:"text"`
	Url     []string           `xml:"url"`
}

// LicenseTextType ...
type LicenseTextType struct {
	XMLName         xml.Name `xml:"licenseTextType"`
	ContenttypeAttr string   `xml:"content-type,attr,omitempty"`
	EncodingAttr    string   `xml:"encoding,attr,omitempty"`
}

// HashType ...
type HashType struct {
	XMLName xml.Name `xml:"hashType"`
	AlgAttr string   `xml:"alg,attr"`
}

// Scope ...
type Scope string

// Classification ...
type Classification string

// HashAlg ...
type HashAlg string

// HashValue ...
type HashValue string

// Encoding ...
type Encoding string

// Cpe ...
type Cpe string

// UrnUuid ...
type UrnUuid string

// ExternalReferenceType ...
type ExternalReferenceType string

// ExternalReferences ...
type ExternalReferences struct {
	XMLName   xml.Name           `xml:"externalReferences"`
	Reference *ExternalReference `xml:"reference"`
}

// ExternalReference ...
type ExternalReference struct {
	XMLName  xml.Name `xml:"externalReference"`
	TypeAttr string   `xml:"type,attr"`
	Url      []string `xml:"url"`
	Comment  []string `xml:"comment"`
}

// CommitsType ...
type CommitsType struct {
	XMLName xml.Name    `xml:"commitsType"`
	Commit  *CommitType `xml:"commit"`
}

// CommitType ...
type CommitType struct {
	XMLName   xml.Name                  `xml:"commitType"`
	Uid       []string                  `xml:"uid"`
	Url       []string                  `xml:"url"`
	Author    []*IdentifiableActionType `xml:"author"`
	Committer []*IdentifiableActionType `xml:"committer"`
	Message   []string                  `xml:"message"`
}

// IdentifiableActionType ...
type IdentifiableActionType struct {
	XMLName   xml.Name    `xml:"identifiableActionType"`
	Timestamp []time.Time `xml:"timestamp"`
	Name      []string    `xml:"name"`
	Email     []string    `xml:"email"`
}

// PedigreeType ...
type PedigreeType struct {
	XMLName     xml.Name          `xml:"pedigreeType"`
	Ancestors   []*ComponentsType `xml:"ancestors"`
	Descendants []*ComponentsType `xml:"descendants"`
	Variants    []*ComponentsType `xml:"variants"`
	Commits     []*CommitsType    `xml:"commits"`
	Notes       []string          `xml:"notes"`
}

// Bom ...
type Bom struct {
	XMLNs            string   `xml:"xmlns,attr"`
	XMLNsV           string   `xml:"xmlns:v,attr"`
	XMLName          xml.Name `xml:"bom"`
	VersionAttr      int      `xml:"version,attr,omitempty"`
	SerialNumberAttr string   `xml:"serialNumber,attr,omitempty"`
	// Components         *ComponentsType       `xml:"components"`
	Components         *Components           `xml:"components"`
	ExternalReferences []*ExternalReferences `xml:"externalReferences"`
}
